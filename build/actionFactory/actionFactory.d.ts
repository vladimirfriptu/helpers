export declare function createAsyncActions<R, S, F>(type: string): {
    request: boolean extends (R extends never ? true : false) ? import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string> : unknown extends R ? boolean extends (R extends never ? true : false) ? [void] extends [R] ? import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string> : import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<R, string> : import("@reduxjs/toolkit").ActionCreatorWithNonInferrablePayload<string> : [void] extends [R] ? import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string> : import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<R, string>;
    success: boolean extends (S extends never ? true : false) ? import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string> : unknown extends S ? boolean extends (S extends never ? true : false) ? [void] extends [S] ? import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string> : import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<S, string> : import("@reduxjs/toolkit").ActionCreatorWithNonInferrablePayload<string> : [void] extends [S] ? import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string> : import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<S, string>;
    failure: boolean extends (F extends never ? true : false) ? import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string> : unknown extends F ? boolean extends (F extends never ? true : false) ? [void] extends [F] ? import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string> : import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<F, string> : import("@reduxjs/toolkit").ActionCreatorWithNonInferrablePayload<string> : [void] extends [F] ? import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string> : import("@reduxjs/toolkit").ActionCreatorWithOptionalPayload<F, string>;
    type: string;
};
